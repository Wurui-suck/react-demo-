{"version":3,"sources":["GlobalHeader.js","SiteAdd.js","SiteSquare.js","GlobalMain.js","App.js","serviceWorker.js","index.js"],"names":["GlobalHeader","props","state","inputValue","style","color","e","this","setState","target","value","className","method","action","name","type","id","onChange","inputChange","bind","onFocus","inputFocus","onBlur","inputBlur","React","Component","SiteAdd","site","url","window","prompt","indexOf","newSite","logo","simplifyUrl","toUpperCase","link","push","updateSite","onClick","addSite","xlinkHref","SiteSquare","index","splice","map","item","key","open","width","src","stopPropagation","closeSite","call","GlobalMain","replace","siteMap","JSON","parse","localStorage","getItem","setItem","stringify","document","addEventListener","hashMap","i","length","toLowerCase","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4489d7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './GlobalHeader.css'\r\nclass GlobalHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            inputValue: '使用百度搜索',\r\n            style: { color: 'grey' }\r\n        }\r\n    }\r\n    inputChange(e) {\r\n        this.setState({ inputValue: e.target.value })\r\n    }\r\n    inputFocus() {\r\n        if (this.state.inputValue === '使用百度搜索') {\r\n            this.setState({\r\n                inputValue: '', style: { color: 'black' }\r\n            })\r\n        }\r\n    }\r\n    inputBlur() {\r\n        if (this.state.inputValue === '') {\r\n            this.setState({\r\n                inputValue: '使用百度搜索', style: { color: 'grey' }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"globalHeader\">\r\n                <form className='search' method=\"GET\" action=\"https://www.baidu.com/s\" target='_blank'>\r\n                    <input\r\n                        name=\"word\"\r\n                        type=\"text\"\r\n                        id=\"searchInput\"\r\n                        value={this.state.inputValue}\r\n                        style={this.state.style}\r\n                        onChange={this.inputChange.bind(this)}\r\n                        onFocus={this.inputFocus.bind(this)}\r\n                        onBlur={this.inputBlur.bind(this)}>\r\n                    </input>\r\n                    <button type=\"submit\">搜索</button>\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default GlobalHeader","import React from 'react'\r\nimport './SiteAdd.css'\r\nclass SiteAdd extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            site: this.props.site\r\n        }\r\n    }\r\n    addSite() {\r\n        let url = window.prompt('请问你要添加的网址是什么？')\r\n        const { site } = this.state\r\n        if (url.indexOf('http') !== 0) {\r\n            url = 'https://' + url\r\n        }\r\n        let newSite = {\r\n            logo: this.props.simplifyUrl(url)[0].toUpperCase(), url: url, link: url\r\n        }\r\n        site.push(newSite)\r\n        this.props.updateSite(site)\r\n    }\r\n    render() {\r\n        return (\r\n            <li className=\"addButton lastLi\" onClick={this.addSite.bind(this)}>\r\n                <div className=\"icon-wrapper\">\r\n                    <svg className=\"icon\">\r\n                        <use xlinkHref=\"#icon-add\"></use>\r\n                    </svg>\r\n                    <div className=\"text\">新增网站</div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SiteAdd","import React from 'react'\r\nimport SiteAdd from './SiteAdd'\r\nimport './SiteSquare.css'\r\nclass SiteSquare extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            site: this.props.site\r\n        }\r\n    }\r\n    closeSite(index) {\r\n        this.props.site.splice(index, 1)\r\n        this.props.updateSite(this.props.site)\r\n    }\r\n    render() {\r\n        let { site } = this.props\r\n        const { simplifyUrl } = this.props\r\n        return (\r\n            <ul className='siteList'>\r\n                {site.map((item, key) => {\r\n                    return (\r\n                        <li key={key} onClick={() => { window.open(item.link) }}>\r\n                            <div className=\"site-wrapper\">\r\n                                <div className=\"logo\">\r\n                                    <img width='32' src={`https://${simplifyUrl(item.link)}/favicon.ico`} ></img>\r\n                                </div>\r\n                                <div className=\"link\">{simplifyUrl(item.link)}</div>\r\n                                <div className=\"close\" onClick={(e) => {\r\n                                    e.stopPropagation()\r\n                                    this.closeSite.call(this, key)\r\n                                }} >\r\n                                    <div className=\"icon-wrapper\">\r\n                                        <svg className=\"icon delete\">\r\n                                            <use xlinkHref=\"#icon-shanchu\"></use>\r\n                                        </svg>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}\r\n                <SiteAdd\r\n                    updateSite={this.props.updateSite}\r\n                    site={this.state.site}\r\n                    simplifyUrl={this.props.simplifyUrl}\r\n                ></SiteAdd>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SiteSquare","import React from 'react'\r\nimport SiteSquare from './SiteSquare'\r\nimport './GlobalMain.css'\r\nclass GlobalMain extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            siteMap: JSON.parse(localStorage.getItem('siteMap')) ||\r\n                [\r\n                    { logo: \"D\", url: \"https://douyu.com\", link: \"https://douyu.com\" },\r\n                    { logo: \"H\", url: \"https://huya.com\", link: \"https://huya.com\" },\r\n                    { logo: \"X\", url: \"https://xiedaimala.com\", link: \"https://xiedaimala.com\" },\r\n                    { logo: \"G\", url: \"https://github.com\", link: \"https://github.com\" },\r\n                    { logo: \"M\", url: \"https://mail.qq.com/\", link: \"https://mail.qq.com/\" },\r\n                    { logo: \"B\", url: \"https://bilibili.com\", link: \"https://bilibili.com\" }\r\n                ]\r\n        }\r\n    }\r\n    simplifyUrl = (url) => {\r\n        return url.replace('https://', '')\r\n            .replace('http://', '')\r\n            .replace('www.', '')\r\n            .replace(/\\/.*/, '')\r\n    }\r\n    updateSite(newSite) {\r\n        this.setState({ siteMap: newSite })\r\n        localStorage.setItem('siteMap', JSON.stringify(newSite))\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener('keypress', (e) => {\r\n            const { key } = e\r\n            const hashMap = this.state.siteMap\r\n            for (let i = 0; i < hashMap.length; i++) {\r\n                if (hashMap[i].logo.toLowerCase() === key) {\r\n                    window.open(hashMap[i].url)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"globalMain\">\r\n                <SiteSquare site={this.state.siteMap}\r\n                    simplifyUrl={this.simplifyUrl}\r\n                    updateSite={this.updateSite.bind(this)}></SiteSquare>\r\n\r\n            </main>\r\n        )\r\n    }\r\n}\r\nexport default GlobalMain","import React from 'react';\nimport './App.css';\nimport GlobalHeader from './GlobalHeader'\nimport GlobalMain from './GlobalMain'\n\nclass App extends React.Component {\n  constructor(props) {\n    super()\n  }\n  render() {\n    return (\n      <div>\n        <GlobalHeader></GlobalHeader>\n        <GlobalMain></GlobalMain>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}